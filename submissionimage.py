# -*- coding: utf-8 -*-
"""submissionimage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ionII0x4VskleqEZNiqQ9luI1p6gCTbi

Nama Lengkap : Khofifah Munjiah

Mengimport Library
"""

# Commented out IPython magic to ensure Python compatibility.
# Impor library untuk analisis data
import pandas as pd
from pandas import DataFrame

# Library untuk mengekstrak file
import zipfile
import os
# Library untuk visualisai data / menampilkan gambar
# %matplotlib inline
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# Library untuk menggunakan gambar genarator
import tensorflow as tf
import numpy as np
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from google.colab import files

"""Download dataset"""

# mendownload dataset menggunakan perintah wget
!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

"""Ekstrak file zip"""

# mendefinisikan variabel bernama local_zip dan memberikan nilai /content/rockpaperscissors.zip
local_zip = '/content/rockpaperscissors.zip'

# membuka file zip dengan path yang disimpan dalam variabel local_zip
zip_ref = zipfile.ZipFile(local_zip, 'r')

# mengekstrak semua isi file zip ke direktori /content
zip_ref.extractall('/content')
zip_ref.close() # menutup file zip

"""Create a folder for paper image data"""

paper_folder = os.path.join('/content/rockpaperscissors/paper')

# Menampilkan jumlah total gambar dalam folder paper
len_paper_folder = len(os.listdir(paper_folder))
print("Total paper pictures:", len_paper_folder)

# Tampilkan 5 data dalam folder paper
paper = os.listdir(paper_folder)
print("5 data in the paper folder:")
i=0
paper_temp = []
for file_paper in paper[:5]:
  paper_temp.append(file_paper)
  i=i+1
#membuat dictionary dengan kunci 'File Name' dan nilai berupa daftar paper_temp
data_paper = {'File Name': paper_temp}
# membuat DataFrame pandas dari dictionary data_paper, dengan index yang diset menjadi [1, 2, 3, 4, 5]
df_paper = pd.DataFrame(data_paper, index=[1,2,3,4,5])
#menampilkan lima baris pertama dari DataFrame
df_paper.head()

"""Untuk memuat dan menampilkan gambar yang terletak di path tertentu."""

# Memuat gambar dari path yang diberikan
image_paper = image.load_img('/content/rockpaperscissors/paper/vfKiFjWIK9JKHxLn.png')
# Menampilkan gambar yang telah dimuat
image_paper_plot = plt.imshow(image_paper)

# Membuat path ke folder yang berisi gambar batu (rock)
rock_folder = os.path.join('/content/rockpaperscissors/rock')

# Menghitung jumlah total file (gambar) dalam folder rock
len_rock_folder = len(os.listdir(rock_folder))
print("Total rock pictures:", len_rock_folder)

# Mendapatkan daftar semua file dalam folder rock dan menyimpannya dalam variabel rock.
rock = os.listdir(rock_folder)
print("5 data in the rock folder:")
i=0
rock_temp = []
for file_rock in rock[:5]:
  rock_temp.append(file_rock)
  i=i+1
data_rock = {'File Name': rock_temp}
df_rock = pd.DataFrame(data_rock, index=[1,2,3,4,5])
df_rock.head()

"""Untuk memuat dan menampilkan gambar yang terletak di path tertentu."""

# Memuat gambar dari path yang diberikan
image_rock = image.load_img('/content/rockpaperscissors/rock/YmNXS0VhjQjldK3P.png')
# Menampilkan gambar yang telah dimuat
image_plot = plt.imshow(image_rock)

# Memuat gambar dari path yang diberikan
image_paper = image.load_img('/content/rockpaperscissors/paper/vfKiFjWIK9JKHxLn.png')
# Menampilkan gambar yang telah dimuat
image_paper_plot = plt.imshow(image_paper)

# Memuat gambar dari path yang diberikan
image_paper = image.load_img('/content/rockpaperscissors/paper/vfKiFjWIK9JKHxLn.png')
# Menampilkan gambar yang telah dimuat
image_paper_plot = plt.imshow(image_paper)

"""
Create a folder for scissors image data"""

scissors_folder = os.path.join('/content/rockpaperscissors/scissors')

# Tampilkan jumlah total gambar dalam folder scissors
len_scissors_folder = len(os.listdir(scissors_folder))
print("Total scissors pictures:", len_scissors_folder)

# Tampilkan 5 data dalam folder scissors
scissors = os.listdir(scissors_folder)
print("5 data in the scissors folder:")
i=0
scissors_temp = []
for file_scissors in scissors[:5]:
  scissors_temp.append(file_scissors)
  i=i+1
data_scissors = {'File Name': scissors_temp}
df_scissors = pd.DataFrame(data_scissors, index=[1,2,3,4,5])
df_scissors.head()

# Memuat gambar dari path yang diberikan
image_scissors = image.load_img('/content/rockpaperscissors/scissors/g2CVyHgIl83M2F0m.png')
# Menampilkan gambar yang telah dimuat
image_plot = plt.imshow(image_scissors)

"""Using Image Generator"""

# Membuat Path untuk Direktori train_dir
train_dir = os.path.join("/content/rockpaperscissors/rps-cv-images/")

# Membuat Objek ImageDataGenerator
train_datagen = ImageDataGenerator(
                rescale=1./255,
                rotation_range=20,
                horizontal_flip=True,
                shear_range=0.2,
                zoom_range=0.2,
                fill_mode = 'nearest',

                # Data dibagi menjadi 40% data valiasi dan 60% data training
                validation_split=0.4)

# Memuat data pelatihan
train_generator = train_datagen.flow_from_directory(
        train_dir,
        target_size=(150, 150),
        batch_size=40,
        class_mode='categorical',
        subset='training')

# Memuat Data Validasi
validation_generator = train_datagen.flow_from_directory(
        train_dir,
        target_size=(150, 150),
        batch_size=40,
        class_mode='categorical',
        subset='validation')

"""Make models"""

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

"""Kompilasi model"""

# Comple model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Definisi Callback Custom
class stop(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.96):
      print("\nAccuracy has reached 0.96")
      self.model.stop_training=True
callbacks=stop()

# melatih models dengan model.fit
train_models = model.fit(
      train_generator,
      batch_size=15,
      epochs=10,
      validation_data=validation_generator,
      validation_steps=5, callbacks=[callbacks])

# Mengunggah file
uploaded = files.upload()
for fn in uploaded.keys():

  # memprediksi gambar
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  # Mengonversi Gambar Menjadi Array dan Mempersiapkannya untuk Prediksi
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)

  # Menampilkan Hasil Prediksi
  print(fn)
  if classes[0,0]!=0:
    print('This picture shows the shape of the paper')
  elif classes[0,1]!=0:
    print('This picture shows the shape of the rock')
  elif classes[0,2]!=0:
    print('This picture shows the shape of the scissors')
  else:
    print('Unknown image')